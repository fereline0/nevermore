datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                Int                    @id @default(autoincrement())
  name              String?
  email             String?                @unique
  emailVerified     DateTime?
  image             String?
  roleId            Int?
  role              Role?                  @relation(fields: [roleId], references: [id])
  detailInformation UserDetailInformation?
  subscribed        UserSubscribers[]      @relation("subscriber")
  subscribers       UserSubscribers[]      @relation("user")
  comments          UserComments[]         @relation("user")
  writerComments    UserComments[]         @relation("writer")
  accounts          Account[]
  sessions          Session[]
}

model UserSubscribers {
  id  Int   @id @default(autoincrement())

  subscriberId Int
  subscriber   User @relation("subscriber", fields: [subscriberId], references: [id], onDelete: Cascade)
  userId Int
  user   User @relation("user", fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  color String @unique

  users     User[]
  abilities Ability[]
}

model Ability {
  id   Int    @id @default(autoincrement())
  slug String @unique

  roles Role[]
}

model UserComments {
  id       Int      @id @default(autoincrement())
  value    String
  dateTime DateTime

  writerId Int
  writer   User @relation("writer", fields: [writerId], references: [id], onDelete: Cascade)
  userId   Int
  user     User @relation("user", fields: [userId], references: [id], onDelete: Cascade)
}

model UserDetailInformation {
  id         Int       @id @default(autoincrement())
  aboutMe    String?
  occupation String?
  interests  String?
  gender     String?
  bithday    DateTime?

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
